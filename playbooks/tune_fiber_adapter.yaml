---
- name: Tune fiber adapters
  hosts: "{{ run }}"
  become: yes
  vars:
    num_cmd_elems: 2048

  tasks:

    ####################
    # Sanity checks    #
    ####################

    # Check to make sure our key tunable exists.
    - name: Check if the tunable exists
      fail:
        msg: "'{{ key }}' is not defined"
      when: vars[key] is not defined

    # Check to make sure our device is defined
    - name: Check if the device is defined
      fail:
        msg: "device is not defined"
      when: device is not defined

    - name: Get subdevice for the specified device
      shell: "lsdev -p {{ device }} | awk '{ print $1 }'"
      register: subdevice
      ignore_errors: yes

    - name: Debug subdevice
      debug:
        msg: "Redundancy check for each device: {{ subdevice.stdout }}"

    - name: Fail if no subdevice is found
      fail:
        msg: "No subdevice found for device {{ device }}"
      when: subdevice.stdout == ""

    - name: Set subdevice fact
      set_fact:
        subdevice: "{{ subdevice.stdout_lines[0] }}"
      when: subdevice.stdout != ""

    - name: Check for device in lspath output
      shell: "lspath | grep -w {{ subdevice }}"
      register: lspath_check
      ignore_errors: yes

    - name: Check if 'fcs' is in the device name
      fail:
        msg: "The device name '{{ device }}' does not contain 'fcs'"
      when: "'fcs' not in device"

    ####################
    # Redundancy check #
    ####################
    - name: Get lspath output
      shell: "lspath"
      register: lspath_output

    - name: Analyze path redundancy
      shell: |
        echo "{{ lspath_output.stdout }}" | awk '{print $2, $3}' | sort | uniq -c | awk '$1 < 2 {print $2, $3, "not redundant"}'
      register: redundancy_check
      failed_when: redundancy_check.stdout != ""

    ####################
    # Perform the work #
    ####################
    - name: Putting {{ device }} in a defined state
      shell: "rmdev -l {{ device }} -R"
      register: rmdev_output
      failed_when: rmdev_output.rc != 0

    - name: Debug subdevice
      debug:
        msg: "Rmdev output for review: {{ rmdev_output.stdout }}"

    - name: Tune {{ key }}={{ vars[key] }} on {{ device }}
      shell: "chdev -a {{ key }}={{ vars[key] }} -l {{ device }}"
      register: chdev_output
      failed_when: chdev_output.rc != 0

    - name: Running cfgmgr
      shell: "cfgmgr"